package com.ldubgd.botforuni.services;

import com.ldubgd.botforuni.domain.Statement;
import com.ldubgd.botforuni.domain.TelegramUserCache;
import com.ldubgd.botforuni.domain.enums.LinkType;
import com.ldubgd.botforuni.keybords.Keyboards;
import com.ldubgd.botforuni.messageSender.MessageSender;
import com.ldubgd.utils.CryptoTool;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;

import java.util.Optional;

@Slf4j
@Service
public class SendMessageService {
    private final MessageSender messageSender;
    private final TelegramUserService telegramUserService;
    private final CryptoTool cryptoTool;

    public SendMessageService(MessageSender messageSender, TelegramUserService telegramUserService, CryptoTool cryptoTool) {
        this.messageSender = messageSender;
        this.telegramUserService = telegramUserService;
        this.cryptoTool = cryptoTool;
    }

    @Value("${link.address}")
    private String linkAddress;

    public void sendMessage(Long chatId, String text) {
        log.info("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É –∑ ID: {}", chatId);
        SendMessage message = SendMessage.builder()
                .text(text)
                .chatId(String.valueOf(chatId))
                .build();
        messageSender.sendMessage(message);
    }

    public void sendMessage(Long chatId, String text, InlineKeyboardMarkup inlineKeyboard) {
        log.info("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –¥–æ —á–∞—Ç—É –∑ ID: {}", chatId);
        removePreviousKeyboard(chatId);
        Integer messageId = sendTextMessage(chatId, text, inlineKeyboard);
        telegramUserService.saveMassageId(chatId, messageId);
    }

    private Integer sendTextMessage(Long chatId, String text, InlineKeyboardMarkup inlineKeyboard) {
        log.info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —á–∞—Ç—É –∑ ID: {}", chatId);
        SendMessage message = SendMessage.builder()
                .text(text)
                .chatId(String.valueOf(chatId))
                .replyMarkup(inlineKeyboard)
                .build();
        return messageSender.sendMessage(message);
    }

    private void removePreviousKeyboard(Long chatId) {
        Optional<TelegramUserCache> telegramUserCacheOptional = telegramUserService.findById(chatId);
        telegramUserCacheOptional.ifPresent(telegramUserCache -> {
            if (telegramUserCache.getMassageId() != null) {
                log.info("–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ID: {} —É —á–∞—Ç—ñ –∑ ID: {}", telegramUserCache.getMassageId(), chatId);
                deleteInlineKeyboard(chatId, telegramUserCache.getMassageId());
            } else {
                log.warn("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {}", chatId);
            }
        });
    }

    private void deleteInlineKeyboard(Long chatId, Integer messageId) {
        log.info("–í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ID: {} —É —á–∞—Ç—ñ –∑ ID: {}", messageId, chatId);
        EditMessageReplyMarkup editMessageReplyMarkup = EditMessageReplyMarkup.builder()
                .chatId(String.valueOf(chatId))
                .messageId(messageId)
                .replyMarkup(null)
                .build();
        messageSender.sendMessage(editMessageReplyMarkup);
    }

    public void sendMessage(Long tgId, String text, ReplyKeyboardMarkup replyKeyboard) {
        log.info("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–æ —á–∞—Ç—É –∑ ID: {}", tgId);
        SendMessage message = SendMessage.builder()
                .text(text)
                .chatId(String.valueOf(tgId))
                .replyMarkup(replyKeyboard)
                .build();
        messageSender.sendMessage(message);
    }

    public void sendInfoAboutReadyStatement(Statement statement) {
        log.info("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–æ—Ç–æ–≤—É –¥–æ–≤—ñ–¥–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {}", statement.getTelegramId());
        sendMessage(
                statement.getTelegramId(),
                formatStatement(statement),
                Keyboards.linkToMenuKeyboard());
    }

    public void sendInfoAboutReadyStatementWithFile(Statement statement) {
        log.info("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥–æ—Ç–æ–≤—É –¥–æ–≤—ñ–¥–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {}", statement.getTelegramId());
        sendMessage(
                statement.getTelegramId(),
                formatStatement(statement)
        );

        log.info("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª –∑ ID: {} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {} ", statement.getId(), statement.getTelegramId());

        String fileUrl = generateLink(statement.getId(), LinkType.GET_DOC);
        sendFileUrl(statement.getTelegramId(), fileUrl);
    }

    private String generateLink(Long docId, LinkType linkType) {
        log.info("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ ID: {} —Ç–∏–ø: {}", docId, linkType);
        var hash = cryptoTool.hashOf(docId);
        return "http://" + linkAddress + "/" + linkType + "?id=" + hash;
    }

    public void sendFileUrl(Long telegramId, String fileUrl) {
        log.info("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ URL —Ñ–∞–π–ª—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {}", telegramId);
        String textOfMassage = "–©–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —ñ–∑ –¥–æ–≤—ñ–¥–∫–æ—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ [—Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è](" + fileUrl + ")";

        SendMessage message = SendMessage.builder()
                .text(textOfMassage)
                .chatId(String.valueOf(telegramId))
                .replyMarkup(Keyboards.linkToMenuKeyboard())
                .build();
        message.enableMarkdown(true);

        removePreviousKeyboard(telegramId);
        Integer messageId = messageSender.sendMessage(message);
        telegramUserService.saveMassageId(telegramId, messageId);
    }

    private String formatStatement(Statement statement) {
        return "üìÑ –í–∞—à–∞ –¥–æ–≤—ñ–¥–∫–∞ –≥–æ—Ç–æ–≤–∞:\n\n" +
                statement.toString();
    }

    public void sendMessage(Long chatId, String text, ReplyKeyboardRemove replyKeyboardRemove) {
        log.info("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ replyKeyboard –¥–æ —á–∞—Ç—É –∑ ID: {}", chatId);
        SendMessage message = SendMessage.builder()
                .text(text)
                .chatId(String.valueOf(chatId))
                .replyMarkup(replyKeyboardRemove)
                .build();
        messageSender.sendMessage(message);
    }
}

